import P3
import pytest

def test_ComputeDistMatrix():
    P2_output = {(0, 1): ('ACCAAACATCCAAACA-CCAAC-CCCAGCC-CTTACGCAATC-ATACAAAGAATATT', 'ACCAAACCTGTCCCCATCTAACACCAACCCACATATACAAGCTAAACCAAAAATACC'),
                 (0, 2): ('ACCA-A-ACATCCAA-AC-ACCAAC-CCCA-GCCCTTA-CGCAATCATACAAAGAATATT', 'ACTATACCCACCCAACTCGACCTACACCAATCCCCACATAGCACACAGACCAACAACCTC'),
                 (0, 3): ('A--CCAAACATCCA-AACA-CCAACCCCAGCCCTTACGCAATCATA-CAAAGAAT-A--TT', 'ACCCCACCCGTCTACACCAGCCAACACCAACCCCCAC-CTACTATACCAACCAATAACCTC'),
                 (0, 4): ('A--CCAAACATCC--AAACACCAACCCCAGCCCTTACGCAATCATACAAA-GAAT-A--TT', 'ACCCCATTTATCCATAAAAACCAACACCAACCCCCA-TCTAACACACAAACTAATGACCCC'),
                 (0, 5): ('A--CCAAACATCCA-A-ACACCAACCCCAGCCCTTACGCAATCATACAAAGAATATT', 'ACCCCATCCACCCATACAAACCAACATTA-CCCAT-C-CAAT-ATACAAA-CACCTC'),
                 (0, 6): ('A--CCAAACATCCA-A-ACACCAACCCCAGCCCT-TACGCAATCATACAAAGAATATT', 'ACCCCACTCACCCATACAAACCAACACCA-CTCTCCACCTAAT-ATACAAA-TACCTC'),
                 (1, 2): ('ACCAAACCTGTCC--C-C-ATCTAACACCAACCCACATATA-CAAGCTAAACCAAAAATACC', 'ACTATACCCACCCAACTCGACCT-ACACCAATCCCCACATAGCACAC-AGACCAACAACCTC'),
                 (1, 3): ('ACCAAACCTGTC--C-CCATCTAACACCAACCCACATATACAAGCTAAACCAAAAATACC', 'ACCCCACCCGTCTACACCAGCCAACACCAACCCCCACCTACTATACCAACCAATAACCTC'),
                 (1, 4): ('ACCAAACCTGTCC---CCATCTAACACCAACCCACATAT-ACAAGCTAAACCAAAAATACC', 'ACCCCATTTATCCATAAAAACCAACACCAACCCCCATCTAACACAC-AAACTAATGACCCC'),
                 (1, 5): ('ACCAAACCTGTCCCCATCTAACACCAAC-CCACATATACAAGCTAAACCAAAAATACC', 'ACC--CCATCCACCCATACAA-ACCAACATTACCCATCCAA--TATA-CAAACACCTC'),
                 (1, 6): ('ACCAAACCTGTCCCCATCTAACACCAAC-CCACATATACAAGCTAAACCAAAAATA-C-C', 'ACCCCA-CT-CACCCATACAA-ACCAACACCAC-TCT-CCACCTAATATACAAATACCTC'),
                 (2, 3): ('ACTATACCCACCCA-ACTCGACCTACACCAATCCCCACATAGCACACAGACCAACAACCTC', 'ACCCCACCCGTCTACAC-CAGCCAACACCAACCCCCACCTACTATACCAACCAATAACCTC'),
                 (2, 4): ('ACTATACCCACCCAACTCGACCTACACCAATCCCCACATAGCACACAGACCAACAACCTC', 'ACCCCATTTATCCATAAAAACCAACACCAACCCCCATCTAACACACAAACTAATGACCCC'),
                 (2, 5): ('ACTATACCCACCCA-ACTCGACCTACACCAATCCCCACATAGCACACAGACCAACAACCTC', 'ACCCCATCCACCCATAC-AAACC-A-A-C-ATTACC-CAT-CCA-ATATACAAAC-ACCTC'),
                 (2, 6): ('ACTATACCCACCCA-ACTCGACCTACACCAATCCCCACATAGCACACAGACCAACAACCTC', 'ACCCCACTCACCCATAC-AAACCAACACCACTCTCCACCT---A-ATATA-CAAATACCTC'),
                 (3, 4): ('ACCCCACCCGTCTACACCAGCCAACACCAACCCCCACCTACTATACCAACCAATAACCTC', 'ACCCCATTTATCCATAAAAACCAACACCAACCCCCATCTAACACACAAACTAATGACCCC'),
                 (3, 5): ('ACCCCACCCGTCTACACCAGCCAACACCAACCCCCACCTACTATACCAACCAATAACCTC', 'ACCCCATCCACCCATACAAACCAACA-TTA--CCCATCCAATATA-C-A--AA-CACCTC'),
                 (3, 6): ('ACCCCACCCGTCTACACCAGCCAACACCAACCCCCACCTACTATACCAACCAATAACCTC', 'ACCCCACTCACCCATACAAACCAACACCACTCTCCACCTAATATA-C-A--AAT-ACCTC'),
                 (4, 5): ('ACCCCATTTATCCATAAAAACCAACACCAACCCCCATCTAACACACAAACTAATGACCCC', 'ACCCCATCCACCCATACAAACCAACA-TTA--CCCATCCAATATACAAAC-----ACCTC'),
                 (4, 6): ('ACCCCATTTATCCATAAAAACCAACACCAACCCCCATCTAACACACAAACTAATGACCCC', 'ACCCCACTCACCCATACAAACCAACACCACTCTCCACCTAATATAC--A--AAT-ACCTC'),
                 (5, 6): ('ACCCCATCCACCCATACAAACCAACATTA--C-CCATCCAATATACAAACACCTC', 'ACCCCACTCACCCATACAAACCAACACCACTCTCCACCTAATATACAAATACCTC')}
    P3_output = P3.ComputeDistMatrix(P2_output)
    P3_output_expected = [[0.0, 0.4522470626742357, 0.4522470626742357, 0.3641308618362756, 0.3641308618362756, 0.30409883108112323, 0.31925086156926286],
                          [0.4522470626742357, 0.0, 0.36811871779449096, 0.3802009262047681, 0.4197118409515671, 0.4408399986765892, 0.30409883108112323],
                          [0.4522470626742357, 0.36811871779449096, 0.0, 0.36360138775851414, 0.5033762053808777, 0.28235817842618405, 0.31811793084023765],
                          [0.3641308618362756, 0.3802009262047681, 0.36360138775851414, 0.0, 0.35584348469633686, 0.30409883108112323, 0.2326161962278796],
                          [0.3641308618362756, 0.4197118409515671, 0.5033762053808777, 0.35584348469633686, 0.0, 0.22219936210737928, 0.2326161962278796],
                          [0.30409883108112323, 0.4408399986765892, 0.28235817842618405, 0.30409883108112323, 0.22219936210737928, 0.0, 0.14836930749743993],
                          [0.31925086156926286, 0.30409883108112323, 0.31811793084023765, 0.2326161962278796, 0.2326161962278796, 0.14836930749743993, 0.0]]

    assert P3_output == P3_output_expected

def test_Example():
    P2_output = {(0, 1): ('TCC---G', 'TGCTACG')}
    P3_output = P3.ComputeDistMatrix(P2_output)
    P3_output_expected = [[0.0, 0.30409883108112323],
                          [0.30409883108112323, 0.0]]

    assert P3_output == P3_output_expected

def test_Fails():
    # input not a dict
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix("")

    # input is a dict with length 0
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({})

    # input is a dict with not tuple
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({"": ""})

    # input is a dict tuples with key of length other than 2
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, 1, 1): ("AT", "AT")})

    # input is a dict tuples with key not integer
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, "1",): ("AT", "AT")})

    # input is a dict tuples with value of length other than 2
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, 1): ("AT", "AT", "AT")})

    # input is a dict tuples with sequences of different length
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, 1): ("AT", "ATG")})

    # input is a dict tuples with value not string
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, 1,): (["AT"], "AT")})

    # at least one sequence has length of 0
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, 1):("A", "")})

    # at least one sequence contains invalid nucleotide
    with pytest.raises(Exception, match="malformed input"):
        P3.ComputeDistMatrix({(0, 1):("ATg", "ATG")})
